global proc GenerateStaircase(int $numSteps, float $radius, float $stepHeight, float $stepWidth, float $spiralRotation, float $spaceBetweenSteps)
{
    // Create an empty group to contain the staircase objects
    string $staircaseGroup = `group -em -n "staircase"`;

    int $step = 0; // Recounts how many steps have been created

    float $angle = 0.0; // Determines how to move the steps corresponding to angle
    float $rotation = 0.0; // Rotates the steps each loop
    float $rotationIncrement = -$spiralRotation; // Each step rotation based on spiral rotation amount

    // Create steps
    while ($step < $numSteps)
    {
        float $x = $radius * cos(deg_to_rad($angle));
        float $z = $radius * sin(deg_to_rad($angle));
        
        float $y = $step * ($stepHeight + $spaceBetweenSteps);

        // Create a cube as the step at position ($x, $y, $z) and rotate it
        polyCube -w $stepWidth -h $stepHeight -d 1.8 -ax 0 1 0 -sx 1 -sy 1 -sz 1 -ch 1;
        string $stepObj[] = `ls -selection`; // Get the name of the created step object as a string array
        move $x $y $z;
        rotate 0 $rotation 0;

        // Parent the first element of the step object array to the staircase group
        parent $stepObj[0] $staircaseGroup;

        $angle += $spiralRotation;
        $rotation += $rotationIncrement;
        $radius += ($stepHeight + $spaceBetweenSteps) / 70;
        $step++; // Number of steps for the next loop
    }

    // Create a center pole with the specified radius
    polyCylinder -r ($radius / 3.25) -h (($stepHeight + $spaceBetweenSteps) * $numSteps) -sx 20 -sy 1 -sz 1 -ax 0 1 0 -ch 1;
    string $centerPole[] = `ls -selection`; // Get the name of the created center pole object as a string array
    move 0 ((($stepHeight + $spaceBetweenSteps) * $numSteps) / 2) 0;

    // Parent the first element of the center pole array to the staircase group
    parent $centerPole[0] $staircaseGroup;
}

// Function with the following:
// number of steps, radius of spiral, step height, step width, spiral rotation, and space between steps
GenerateStaircase(18, 2.0, 0.2, 5, 20, 1.0);
