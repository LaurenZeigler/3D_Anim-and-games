//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""myPlayer"",
            ""id"": ""86188984-4b14-413c-b4e6-6b12138e3fb7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1ca0eec0-93ae-48dc-ae76-1d5daae83f05"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b9b56629-5483-494b-9b37-ca8860fff975"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""fb062ae5-ef53-493f-87d7-cdd654a599f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""48512e05-7a3c-4c4d-8e14-f79b480edb08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run toggle"",
                    ""type"": ""Button"",
                    ""id"": ""0369e09d-5976-4050-ab28-1f24ee4b5951"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8223ca3-9826-4759-a60c-f0ceabd5d348"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60db4941-2322-4f03-8e2c-fe9be1f6878d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b6da4b1-073f-4a31-97bb-613b0f774db6"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ac5fb43-0780-4141-9e6a-ea084754c8f7"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5021c1a-9782-4372-82e8-2d1758f42cf4"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // myPlayer
        m_myPlayer = asset.FindActionMap("myPlayer", throwIfNotFound: true);
        m_myPlayer_Move = m_myPlayer.FindAction("Move", throwIfNotFound: true);
        m_myPlayer_Look = m_myPlayer.FindAction("Look", throwIfNotFound: true);
        m_myPlayer_Interact = m_myPlayer.FindAction("Interact", throwIfNotFound: true);
        m_myPlayer_Jump = m_myPlayer.FindAction("Jump", throwIfNotFound: true);
        m_myPlayer_Runtoggle = m_myPlayer.FindAction("Run toggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // myPlayer
    private readonly InputActionMap m_myPlayer;
    private List<IMyPlayerActions> m_MyPlayerActionsCallbackInterfaces = new List<IMyPlayerActions>();
    private readonly InputAction m_myPlayer_Move;
    private readonly InputAction m_myPlayer_Look;
    private readonly InputAction m_myPlayer_Interact;
    private readonly InputAction m_myPlayer_Jump;
    private readonly InputAction m_myPlayer_Runtoggle;
    public struct MyPlayerActions
    {
        private @Controls m_Wrapper;
        public MyPlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_myPlayer_Move;
        public InputAction @Look => m_Wrapper.m_myPlayer_Look;
        public InputAction @Interact => m_Wrapper.m_myPlayer_Interact;
        public InputAction @Jump => m_Wrapper.m_myPlayer_Jump;
        public InputAction @Runtoggle => m_Wrapper.m_myPlayer_Runtoggle;
        public InputActionMap Get() { return m_Wrapper.m_myPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MyPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IMyPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_MyPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MyPlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Runtoggle.started += instance.OnRuntoggle;
            @Runtoggle.performed += instance.OnRuntoggle;
            @Runtoggle.canceled += instance.OnRuntoggle;
        }

        private void UnregisterCallbacks(IMyPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Runtoggle.started -= instance.OnRuntoggle;
            @Runtoggle.performed -= instance.OnRuntoggle;
            @Runtoggle.canceled -= instance.OnRuntoggle;
        }

        public void RemoveCallbacks(IMyPlayerActions instance)
        {
            if (m_Wrapper.m_MyPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMyPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_MyPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MyPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MyPlayerActions @myPlayer => new MyPlayerActions(this);
    public interface IMyPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRuntoggle(InputAction.CallbackContext context);
    }
}
